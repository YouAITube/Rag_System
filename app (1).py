# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12COOf2uaE_zS0Weq-BAIjkXoCrOe_lgh
"""

import torch
import numpy as np
import faiss
import streamlit as st
from transformers import AutoTokenizer, AutoModel, pipeline

# Function to get code embedding (DO NOT CHANGE)
def get_code_embedding(code, model_name="microsoft/codebert-base"):
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModel.from_pretrained(model_name)

    inputs = tokenizer(code, return_tensors="pt", truncation=True, padding=True, max_length=512)
    with torch.no_grad():
        outputs = model(**inputs)

    embedding = outputs.last_hidden_state.mean(dim=1).squeeze().numpy()
    return embedding

# Function to search similar code in FAISS index
def search_similar_code(query_embedding, top_k=5):
    index = faiss.read_index("code_embeddings.index")
    query_embedding = np.array([query_embedding], dtype=np.float32)
    distances, indices = index.search(query_embedding, top_k)
    return indices[0] if indices.size > 0 else []

# Function to get plagiarism response from a language model
def get_plagiarism_response(user_code, similar_code_files, model_name="mistralai/Mistral-7B-Instruct-v0.2"):
    prompt = f"""
    You are a plagiarism detection assistant. Your task is to determine whether the given code is plagiarized.

    Here is the user's code:
    {user_code}

    Below are similar code files found in the database:
    {similar_code_files}

    Based on the above, is the user's code plagiarized? Respond with only "Yes" or "No".
    If "Yes", include the references to the code files from the database as context.
    """

    pipe = pipeline("text-generation", model=model_name, device=0 if torch.cuda.is_available() else -1)

    response = pipe(
        prompt,
        max_length=100,
        num_return_sequences=1,
        temperature=0.1,
        eos_token_id=pipe.tokenizer.eos_token_id,
    )[0]['generated_text']

    if "Yes" in response:
        return "Yes" + response.split("Yes", 1)[1].strip()
    elif "No" in response:
        return "No"
    else:
        return "Could not determine plagiarism."

# Streamlit UI
def streamlit_ui():
    st.title("üöÄ Code Plagiarism Detection")

    code_input = st.text_area("Enter your code snippet:")

    if st.button("üîç Check for Plagiarism"):
        if code_input.strip():
            with st.spinner("Processing..."):
                try:
                    query_embedding = get_code_embedding(code_input)
                    similar_indices = search_similar_code(query_embedding)

                    if similar_indices:
                        similar_code_files = [f"Code File {idx}" for idx in similar_indices]
                        response = get_plagiarism_response(code_input, "\n".join(similar_code_files))

                        if response.lower().startswith("yes"):
                            st.error("üö® Plagiarism Detected! References:")
                            st.write(response.split("Yes", 1)[1].strip())
                        elif response.lower() == "no":
                            st.success("‚úÖ No plagiarism detected.")
                        else:
                            st.warning(response)
                    else:
                        st.warning("‚ö†Ô∏è No similar code found in the database.")

                except Exception as e:
                    st.error(f"‚ùå Error: {e}")
        else:
            st.error("‚ö†Ô∏è Please enter a code snippet.")

# Main function
def main():
    streamlit_ui()

if __name__ == "__main__":
    main()